---
title: Next-generation matrix demo
format: html
---

```{python}
import numpy as np
import polars as pl
import altair as alt
```

The next generation matrix $\mathbf{R}$ has entries $R_{ij}$. Every infection in group $j$ in this generation will give rise to $R_{ij}$ infections in group $i$ in the next generation.

In this example, there are three groups. The core group transmits many infections to others in the core group. Children and the general public don't transmit very much.

```{python}
R = np.array(
    [
        [3.0, 0.0, 0.2],  # core
        [0.1, 1.0, 0.5],  # children
        [0.25, 1.0, 1.5],  # non-core adults
    ]
)
```

Given a length-3 vector of infections $\mathbf{x}$, representing the number of infections in each group in some generation, the next generation will have $\mathbf{Rx}$ infections in each group.

By definition, $\mathbf{v}$ and $\lambda$ are an eigenvector and eigenvalue of $\mathbf{R}$ if $\mathbf{Rv} = \lambda \mathbf{v}$:

```{python}
# do the eigenvalue analysis
e = np.linalg.eig(R)
# which eigenvalue is the dominant one?
i = np.argmax(e.eigenvalues)
dominant_eigenvalue = e.eigenvalues[i]

assert dominant_eigenvalue > 0
assert np.isreal(dominant_eigenvalue)

# get the corresponding eigenvector
v = e.eigenvectors[:, i]

# note that this vector is L2-normalized
# (I need all.equal because there is some machine precision limitation)
assert np.isclose(np.sqrt(sum(v**2)), 1.0)

# but we want an L1-normalized vector
dominant_eigenvector = v / sum(v)

print("Dominant eigenvalue: ", dominant_eigenvalue)
print("Dominant eigenvector:", dominant_eigenvector)
```

Let's do an example, to show how these would play out. Start with a single infection, in the core group:

```{python}
x0 = np.array([1.0, 0.0, 0.0])
```

Then iteratively generate next generations:

```{python}
# simulate
n_generations = 8

x = x0

xs = [x0]

for i in range(n_generations - 1):
    x = np.matmul(R, x)
    xs.append(x)
```

Visualize these results in two charts. First, look at the exponential growth in numbers of infections, noting that the fold change in numbers of infections quickly approaches the dominant eigenvalue of $\mathbf{R}$:

```{python}
# combine results
pops = ["core", "children", "non-core adults"]
results = (
    pl.from_numpy(np.stack(xs), schema=pops)
    .with_row_index(name="generation")
    .unpivot(index="generation", variable_name="population")
    .with_columns(fraction=(pl.col("value") / pl.col("value").sum()).over("generation"))
)

counts = (
    results.group_by("generation")
    .agg(pl.col("value").sum())
    .sort("generation")
    .with_columns(fold=pl.col("value").log().diff().exp())
)

count_chart = (
    alt.Chart(counts)
    .mark_line(color="black")
    .encode(x="generation", y=alt.Y("value", title="No. infections"))
)

# same chart, on a log scale
count_log_chart = (
    alt.Chart(counts)
    .mark_line(color="black")
    .encode(
        x="generation",
        y=alt.Y("value", title="No. infections (log scale)").scale(type="log"),
    )
)

# generation-over-generation fold increase
count_fold_chart = (
    alt.Chart(counts)
    .mark_point(color="black")
    .encode(x="generation", y=alt.Y("fold", title="Fold change in no. infections"))
)

count_chart | count_log_chart | count_fold_chart
```

Next, visualize the distribution of infections across populations, noting that the proportions of infections approaches the composition of the dominant eigenvector:

```{python}
# recast dominant eigenvector as data to show on the plot
dominant_eigenvector_df = pl.from_dict(
    {
        "generation": n_generations - 1,
        "population": pops,
        "value": dominant_eigenvector,
    }
)

# visualize results
color = alt.Color("population", sort=["core", "non-core adults", "children"])

fraction_chart = (
    alt.Chart(results)
    .mark_line()
    .encode(
        x="generation",
        y=alt.Y("fraction", title="Fraction of infections"),
        color=color,
    )
)
de_chart = (
    alt.Chart(dominant_eigenvector_df)
    .mark_point(shape="triangle-left")
    .encode(x="generation", y="value", color=color)
)

fraction_chart + de_chart
```
