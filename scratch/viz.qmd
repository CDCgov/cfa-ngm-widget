---
title: Vaccine allocation
format: html
---

```{python}
import numpy as np
import ngm as ngm
import pandas as pd
import matplotlib.pyplot as plt

```

```{python}
# parameters (core, kids, travelers, general)
n = np.array([0.1, 0.45, 0.05, 0.4]) * 1000000
p_severe = np.array([0.01, 0.1, 0.01, 0.01])
ve = 0.74

# within between group R
hi = 10.0
lo = 1

K = np.array(
    [
        [hi, lo, hi, lo],  # core
        [lo, lo, lo, lo],  # children
        [hi, lo, lo, lo],  # travelers
        [lo, lo, lo, lo],  # general
    ]
)
```


```{python}
# run for no vaccines
n_vax = np.array([0,0,0,0])
test1 = ngm.simulate(n, n_vax, K, p_severe, ve)
test1

# run for 100000 vaccines distributed to core
n_vax = np.array([100000,0,0,0])
test2 = ngm.simulate(n, n_vax, K, p_severe, ve)
test2

```

# Varying total doses

```{python}

# Create a DataFrame with varying total doses
total_doses_range = range(0, 200001, 20000)
n_vax_values = [[doses // 4] * 4 for doses in total_doses_range]

df_n_vax = pd.DataFrame(n_vax_values, columns=["Core", "Kids", "Travelers", "General Population"])

# Run ngm.simulate for each row in the DataFrame and extract 'Re'
results = []
for index, row in df_n_vax.iterrows():
    n_vax = row.values
    result = ngm.simulate(n, n_vax, K, p_severe, ve)
    results.append({
        "Total Doses": total_doses_range[index],
        "Re": result["Re"],
        "Fatalities": outbreak_size * result["severe_infections"].sum()
    })

# Convert results to a DataFrame
results_df = pd.DataFrame(results)

# Plot Re against total doses administered
plt.figure(figsize=(10, 6))
plt.plot(results_df["Total Doses"], results_df["Re"], marker='o', linestyle='-', color='b')
plt.xlabel("Total Doses Administered")
plt.ylabel("R-effective (Re)")
plt.grid(True)
plt.show()


```

# Varying allocation to kids or core

```{python}

# assuming there's an outbreak of this size (for fatality calculation, to do: check this math)
outbreak_size = 10000

# Create a DataFrame with varying n_vax values
n_vax_values = [[x, 100000 - x, 0, 0] for x in range(0, 100001, 5000)]

df_n_vax = pd.DataFrame(n_vax_values, columns=["Core", "Kids", "Travelers", "General Population"])

# Run ngm.simulate for each row in the DataFrame and extract 'Re'
results = []
for index, row in df_n_vax.iterrows():
    n_vax = row.values
    result = ngm.simulate(n, n_vax, K, p_severe, ve)
    results.append({
        "Core Doses": n_vax[0],
        "Re": result["Re"],
        "Fatalities": outbreak_size * result["severe_infections"].sum()
    })

# Convert results to a DataFrame
results_df = pd.DataFrame(results)
# Plot Re and fatalities against doses administered to the core group
fig, ax1 = plt.subplots(figsize=(10, 6))

# Plot Re on the first y-axis
ax1.set_xlabel("Of total doses, the number allocated to core (remaining doses allocated to children)")
ax1.set_ylabel("R-effective (Re)", color='b')
ax1.plot(results_df["Core Doses"], results_df["Re"], marker='o', linestyle='-', color='b')
ax1.tick_params(axis='y', labelcolor='b')

# Create a second y-axis for fatalities
ax2 = ax1.twinx()
ax2.set_ylabel("Fatalities", color='r')
ax2.plot(results_df["Core Doses"], results_df["Fatalities"], marker='o', linestyle='--', color='r')
ax2.tick_params(axis='y', labelcolor='r')

# Add a title and grid
plt.title("100,000 total doses allocated to core or children")
fig.tight_layout()
plt.grid(True)
plt.show()

```
