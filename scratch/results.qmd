---
title: Vaccine allocation
format: html
---

```{python}
import numpy as np
import ngm as ngm
import polars as pl
import polars.selectors as cs
import griddler, griddler.griddle
```

# 3 group model

Here we model the efficacy of varying vaccine allocation to core, children, and general groups.

We assume the following population breakdown:

* core: 5% of the population
* children: 45% of the population
* general: 50% of the population

Vaccine strategies:

* all to core
* all to kids
* even distribution to everyone

We set population sizes for this analysis to a large city of 10 million and administer 0, 200 000, 1 million, and 5 million vaccines.

We assume vaccine efficacy of a single dose vaccine of 74%.

Disease parameters:
* $R_0$ 1.5
* Transmission 6x higher in core group than general

We calculate $R_e$ for each of the vaccine scenarios in each population scenario and each $R_0$ scenario (3 vax strategies x 4 vaccine doses = 12 scenarios) using the next generation matrix approach. We also calculate the distribution of infections and severe infections (per infection) under each scenario.

Parameters can be found in `config.yaml`

```{python}
strategy_names = {"even": "even", "0": "core first", "1": "children first"}

parameter_sets = griddler.griddle.read("config.yaml")


def make_beta(lo, hi):
    return np.array([[hi, lo, lo], [lo, lo, lo], [lo, lo, lo]])


def simulate(params):
    assert sum(params["pop_props"]) == 1.0
    # population sizes
    N_i = params["n_total"] * np.array(params["pop_props"])

    beta = make_beta(lo=params["beta_low"], hi=params["beta_high"])
    p_severe = np.array(params["p_severe"])

    n_vax = ngm.distribute_vaccines(
        params["n_vax_total"], N_i, strategy=params["vax_strategy"]
    )

    result = ngm.simulate(
        n=N_i, n_vax=n_vax, beta=beta, p_severe=p_severe, ve=params["ve"]
    )

    Re = result["Re"]
    ifr = np.dot(result["infections"], result["severe_infections"])

    return pl.DataFrame({"Re": Re, "ifr": ifr, "ifr_times_Re": ifr * Re})


results = griddler.run_squash(simulate, parameter_sets).with_columns(
    pl.col("vax_strategy").replace_strict(strategy_names)
)
```

```{python}
# | output: asis

print(results.to_pandas().to_markdown())

# save results
results.select(
    ["n_vax_total", "vax_strategy", "Re", "ifr", "ifr_times_Re"]
).with_columns(cs.float().round(3)).write_csv("results.csv")
```
