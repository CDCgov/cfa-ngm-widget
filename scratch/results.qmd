---
title: Vaccine allocation
format: html
---

```{python}
import numpy as np
import ngm as ngm
import polars as pl
import griddler, griddler.griddle
```

# 3 group model

Here we model the efficacy of varying vaccine allocation to core, children, and general groups.

We assume the following population breakdown:

* core: 5% of the population
* children: 45% of the population
* general: 50% of the population

Vaccine strategies:

* all to core
* all to kids
* even distribution to everyone

We vary population sizes of this analysis to a large city of 10 million and a medium city of 1 million with 1 million and 200,000 doses of vaccination available respectively.

We assume vaccine efficacy of a single dose vaccine of 75%.

Disease parameters:

* $R_0$ 1.5, 3
* Transmission 10x higher in core group than general

We calculate $R_e$ for each of the vaccine scenarios in each population scenario and each $R_0$ scenario (3 vax x 2 pop x 2 R0 = 12 scenarios) using the next generation matrix approach. We also calculate the distribution of infections and severe infections (per infection) under each scenario.

Parameters can be found in `config.yaml`

```{python}
scenario_names = {None: "even", 0: "core first", 1: "children first"}

parameter_sets = griddler.griddle.read("config.yaml")


def make_beta(lo, hi):
    return np.array([[hi, lo, lo], [lo, lo, lo], [lo, lo, lo]])


def simulate(params):
    assert sum(params["pop_props"]) == 1.0
    # population sizes
    N_i = params["n_total"] * np.array(params["pop_props"])

    beta = make_beta(lo=params["beta_low"], hi=params["beta_high"])
    p_severe = np.array(params["p_severe"])

    n_vax = ngm.distribute_vaccines(
        params["n_vax_total"], N_i, strategy=params["vax_strategy"]
    )

    result = ngm.simulate(
        n=N_i, n_vax=n_vax, beta=beta, p_severe=p_severe, ve=params["ve"]
    )

    return pl.DataFrame(
        {
            "Re": result["Re"],
            "ifr": np.dot(result["infections"], result["severe_infections"]),
        }
    )


results = griddler.run_squash(simulate, parameter_sets)
```

```{python}
# | output: asis

print(results.to_pandas().to_markdown())

# save results
results.drop(["pop_props", "p_severe"]).write_csv("simulation_results.csv")
```
